/*******************************************************************************
 * wallaroo - A library for configurable creation and wiring of C++ classes.
 * Copyright (C) 2012 Daniele Pallastrelli
 *
 * This file is part of wallaroo.
 * For more information, see http://wallaroo.googlecode.com/
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

#include <iostream>
#include <sstream>
#include "console.h"

using namespace std;

WALLAROO_REGISTER( Console )

void Console::Dump()
{
    // print all values:
    cout << "=============================" << endl;
    cout << "Current values:" << endl << endl;
    for ( Dictionary::const_iterator i = values.begin(); i != values.end(); ++i )
        cout << i -> first << " = " << i -> second << endl;
    cout << "=============================" << endl;
}

void Console::GetInput()
{
    // print the usage
    cout << endl;
    cout << "Please, set a value" << endl;
    cout << "syntax: <key> <value>" << endl;
    cout << "(exit to quit)" << endl << endl;;
    cout << " > ";

    // parse the user string:
    string line;
    getline( cin, line );

    if ( line == "exit" )
        exit( 0 );

    stringstream ss( line );

    string key;
    int value;

    if ( ss.eof() ) return;

    ss >> key;
    if ( ss.eof() ) 
    {
        values[ key ] = 0;
        return;
    }

    ss >> value;
    if ( ss.fail() || !ss.eof() )
    {
        values[ key ] = 0;
        return;
    }

    values[ key ] = value;

    cout << "input " << key << " set to value " << values[ key ] << endl;
    cout << endl;
}

int Console::GetMeasure( const std::string& sensor )
{
    if ( ++counter % 100 == 0 )
    {
        Dump();
        GetInput();
    }

    return values[ sensor ];
}

void Console::SetQuantity( const std::string& actuator, int value )
{
    values[ actuator ] = value;
}

