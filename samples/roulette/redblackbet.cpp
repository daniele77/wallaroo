/*******************************************************************************
 * wallaroo - A library for configurable creation and wiring of C++ classes.
 * Copyright (C) 2012 Daniele Pallastrelli
 *
 * This file is part of wallaroo.
 * For more information, see http://wallaroolib.sourceforge.net/
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

#include <sstream>
#include "redblackbet.h"

RedBlackBet::RedBlackBet( Type _type, Currency _amount ) :
    type( _type ),
    amount( _amount )
{
    if ( type == Red )
    {
        winningBins.insert( _1 );
        winningBins.insert( _3 );
        winningBins.insert( _5 );
        winningBins.insert( _7 );
        winningBins.insert( _9 );
        winningBins.insert( _12 );
        winningBins.insert( _14 );
        winningBins.insert( _16 );
        winningBins.insert( _18 );
        winningBins.insert( _19 );
        winningBins.insert( _21 );
        winningBins.insert( _23 );
        winningBins.insert( _25 );
        winningBins.insert( _27 );
        winningBins.insert( _30 );
        winningBins.insert( _32 );
        winningBins.insert( _34 );
        winningBins.insert( _36 );
    }
    else
    {
        winningBins.insert( _2 );
        winningBins.insert( _4 );
        winningBins.insert( _6 );
        winningBins.insert( _8 );
        winningBins.insert( _10 );
        winningBins.insert( _11 );
        winningBins.insert( _13 );
        winningBins.insert( _15 );
        winningBins.insert( _17 );
        winningBins.insert( _20 );
        winningBins.insert( _22 );
        winningBins.insert( _24 );
        winningBins.insert( _26 );
        winningBins.insert( _28 );
        winningBins.insert( _29 );
        winningBins.insert( _31 );
        winningBins.insert( _33 );
        winningBins.insert( _35 );
    }
}

Currency RedBlackBet::Table( const Bin& outcome )
{
    static const unsigned int payout = 1;

    if ( winningBins.find( outcome ) != winningBins.end() ) // win
        return amount * ( payout + 1 );
    else // lose
        return 0;
}

std::string RedBlackBet::Description() const
{
    std::stringstream s;
    s << amount << "$ on " << ( type == Red ? "RED" : "BLACK" );
    return s.str();
}
