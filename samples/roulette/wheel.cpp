/*******************************************************************************
 * wallaroo - A library for configurable creation and wiring of C++ classes.
 * Copyright (C) 2012 Daniele Pallastrelli
 *
 * This file is part of wallaroo.
 * For more information, see http://wallaroolib.sourceforge.net/
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

#include <cstdlib>
#include <ctime>
#include "wheel.h"

WALLAROO_REGISTER( Wheel );

Wheel::Wheel()
{
    bins.push_back( _0 );
    bins.push_back( _1 );
    bins.push_back( _2 );
    bins.push_back( _3 );
    bins.push_back( _4 );
    bins.push_back( _5 );
    bins.push_back( _6 );
    bins.push_back( _7 );
    bins.push_back( _8 );
    bins.push_back( _9 );
    bins.push_back( _10 );
    bins.push_back( _11 );
    bins.push_back( _12 );
    bins.push_back( _13 );
    bins.push_back( _14 );
    bins.push_back( _15 );
    bins.push_back( _16 );
    bins.push_back( _17 );
    bins.push_back( _18 );
    bins.push_back( _19 );
    bins.push_back( _20 );
    bins.push_back( _21 );
    bins.push_back( _22 );
    bins.push_back( _23 );
    bins.push_back( _24 );
    bins.push_back( _25 );
    bins.push_back( _26 );
    bins.push_back( _27 );
    bins.push_back( _28 );
    bins.push_back( _29 );
    bins.push_back( _30 );
    bins.push_back( _31 );
    bins.push_back( _32 );
    bins.push_back( _33 );
    bins.push_back( _34 );
    bins.push_back( _35 );
    bins.push_back( _36 );
    bins.push_back( _00 );

    srand( static_cast< unsigned int >( time( nullptr ) ) );
}

Wheel::~Wheel()
{
}

Bin Wheel::Spin()
{
    std::size_t index = rand() % ( bins.size() );
    return bins[ index ];
}
