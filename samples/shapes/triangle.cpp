/*******************************************************************************
 * wallaroo - A library for configurable creation and wiring of C++ classes.
 * Copyright (C) 2012 Daniele Pallastrelli
 *
 * This file is part of wallaroo.
 * For more information, see http://wallaroo.googlecode.com/
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

#include "triangle.h"

WALLAROO_REGISTER( Triangle, unsigned int, unsigned int );

Triangle::Triangle( unsigned int _base, unsigned int _height ) :
    base( _base ),
    height( _height ),
    xPos( 0 ),
    yPos( 0 )
{
}

Box Triangle::BoundingBox() const
{
    return Box( xPos - ( base/2 ), yPos, xPos + ( base / 2 ), yPos + height );
}

void Triangle::Draw( cxx0x::shared_ptr< Canvas > canvas ) const
{
    // draw the base:
    const unsigned int halfBase = base / 2;
    for ( size_t deltaX = 0; deltaX < base; ++deltaX )
        canvas -> Point( xPos - halfBase + deltaX, yPos );

    // draw the sides
    if ( halfBase >= height )
    {
        for ( size_t deltaX = 0; deltaX < halfBase; ++deltaX )
        {
            int x1 = xPos - halfBase + deltaX;
            int x2 = xPos + halfBase - deltaX;
            int y = yPos + static_cast< int >( floor( 0.5 + ( 2.0 * (double)height / (double)base ) * deltaX ) );
            canvas -> Point( x1, y );
            canvas -> Point( x2, y );
        }
    }
    else
    {
        for ( size_t deltaY = 0; deltaY < height; ++deltaY )
        {
            int deltaX = static_cast< int >( floor( 0.5 + deltaY * (double)base / (double)height / 2.0 ) );
            int x1 = xPos - halfBase + deltaX;
            int x2 = xPos + halfBase - deltaX;
            int y = yPos + deltaY;
            canvas -> Point( x1, y );
            canvas -> Point( x2, y );
        }
    }
}

void Triangle::MoveX( int delta )
{
    xPos += delta;
}

void Triangle::MoveY( int delta )
{
    yPos += delta;
}
