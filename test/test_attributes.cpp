/*******************************************************************************
 * wallaroo - A library for configurable creation and wiring of C++ classes.
 * Copyright (C) 2012 Daniele Pallastrelli
 *
 * This file is part of wallaroo.
 * For more information, see http://wallaroo.googlecode.com/
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

#include <boost/test/unit_test.hpp>

#include "wallaroo/registered.h"
#include "wallaroo/catalog.h"
#include "wallaroo/cxx0x.h"

using namespace wallaroo;
using namespace cxx0x;

// class with attributes:

struct A7 : public Device
{
    A7() :
        strAtt( "str_attr", RegistrationToken() ),
        strAtt2( "str_attr_2", RegistrationToken() ),
        intAtt( "int_attr", RegistrationToken() ),
        ulAtt( "ul_attr", RegistrationToken() ),
        boolAtt( "bool_attr", RegistrationToken() )
    {}
    virtual ~A7() {}

    Attribute< std::string > strAtt;
    Attribute< std::string > strAtt2; 
    Attribute< int > intAtt;
    Attribute< unsigned long > ulAtt;
    Attribute< bool > boolAtt;
};

WALLAROO_REGISTER( A7 )


// tests

BOOST_AUTO_TEST_SUITE( Attributes )

BOOST_AUTO_TEST_CASE( attributesOk )
{
    Catalog catalog;

    BOOST_REQUIRE_NO_THROW( catalog.Create( "a", "A7" ) );
    BOOST_REQUIRE_NO_THROW( catalog[ "a" ] );

    wallaroo_within( catalog )
    {
        BOOST_REQUIRE_NO_THROW( set( "str_attr" ).of( "a" ).to( std::string( "mystring" ) ) );
        BOOST_REQUIRE_NO_THROW( set( "str_attr_2" ).of( "a" ).to( "mystring2" ) );
        BOOST_REQUIRE_NO_THROW( set( "int_attr" ).of( "a" ).to( -123 ) );
        BOOST_REQUIRE_NO_THROW( set( "ul_attr" ).of( "a" ).to( 123456 ) );
        BOOST_REQUIRE_NO_THROW( set( "bool_attr" ).of( "a" ).to( false ) );
    }

    shared_ptr< A7 > a = catalog[ "a" ];

    BOOST_CHECK( a -> strAtt == std::string( "mystring" ) );
    BOOST_CHECK( a -> strAtt2 == std::string( "mystring2" ) );

    BOOST_CHECK( std::string( "mystring" ) == a -> strAtt );
    BOOST_CHECK( std::string( "mystring2" ) == a -> strAtt2 );

    const std::string s1 = a -> strAtt;
    BOOST_CHECK( s1 == "mystring" );
    const std::string s2 = a -> strAtt2;
    BOOST_CHECK( s2 == std::string( "mystring2" ) );

    BOOST_CHECK( a -> intAtt == -123 );
    BOOST_CHECK( a -> ulAtt == 123456 );
    BOOST_CHECK( a -> boolAtt == false );
}

/*
BOOST_AUTO_TEST_CASE( attributesKo )
{
    Catalog catalog;

    BOOST_REQUIRE_NO_THROW( catalog.Create( "a", "A7" ) );
    BOOST_REQUIRE_NO_THROW( catalog[ "a" ] );

    // bad type
    BOOST_CHECK_THROW( use( catalog[ "c2" ] ).as( "x" ).of( catalog[ "c1" ] ), WrongType );

    // src does not exist in the catalog
    BOOST_CHECK_THROW( use( catalog[ "b" ] ).as( "x" ).of( catalog[ "does_not_exist" ] ), ElementNotFound );
    // dst does not exist in the catalog
    BOOST_CHECK_THROW( use( catalog[ "does_not_exist" ] ).as( "x" ).of( catalog[ "c2" ] ), ElementNotFound );
    // attribute does not exist in the src
    BOOST_CHECK_THROW( use( catalog[ "a" ] ).as( "does_not_exist" ).of( catalog[ "c2" ] ), ElementNotFound );

    wallaroo_within( catalog )
    {
        // src does not exist in the catalog
        BOOST_CHECK_THROW( use( "b" ).as( "x" ).of( "does_not_exist" ), ElementNotFound );
        // dst does not exist in the catalog
        BOOST_CHECK_THROW( use( "does_not_exist" ).as( "x" ).of( "c2" ), ElementNotFound );
        // attribute does not exist in the src
        BOOST_CHECK_THROW( use( "a" ).as( "does_not_exist" ).of( "c2" ), ElementNotFound );
    }

    // no catalog selected:
    BOOST_CHECK_THROW( use( "b" ).as( "x" ).of( "c1" ), CatalogNotSpecified );

}
*/

BOOST_AUTO_TEST_CASE( stringAttributes )
{
    Catalog catalog;

    BOOST_REQUIRE_NO_THROW( catalog.Create( "a", "A7" ) );
    BOOST_REQUIRE_NO_THROW( catalog[ "a" ] );

    wallaroo_within( catalog )
    {
        BOOST_REQUIRE_NO_THROW( set( "str_attr" ).of( "a" ).to( std::string( "mystring" ) ) );
        BOOST_REQUIRE_NO_THROW( set( "str_attr_2" ).of( "a" ).to( "mystring2" ) );
        BOOST_REQUIRE_NO_THROW( set( "int_attr" ).of( "a" ).to( "-123" ) );
        BOOST_REQUIRE_NO_THROW( set( "ul_attr" ).of( "a" ).to( "123456" ) );
        BOOST_REQUIRE_NO_THROW( set( "bool_attr" ).of( "a" ).to( "false" ) );
    }

    shared_ptr< A7 > a = catalog[ "a" ];
    BOOST_CHECK( a -> strAtt == std::string( "mystring" ) );
    BOOST_CHECK( a -> strAtt2 == std::string( "mystring2" ) );
    BOOST_CHECK( a -> intAtt == -123 );
    BOOST_CHECK( a -> ulAtt == 123456 );
    BOOST_CHECK( a -> boolAtt == false );
}

BOOST_AUTO_TEST_SUITE_END()