/*******************************************************************************
 * wallaroo - A library for configurable creation and wiring of C++ classes.
 * Copyright (C) 2012 Daniele Pallastrelli
 *
 * This file is part of wallaroo.
 * For more information, see http://wallaroolib.sourceforge.net/
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

#include <boost/test/unit_test.hpp>

#include "wallaroo/registered.h"
#include "wallaroo/catalog.h"

using namespace wallaroo;
using namespace cxx0x;

// some classes:

class A1 : public Part
{
public:
    int F() { return 5; }
};

WALLAROO_REGISTER( A1 );

class B1: public Part
{
public:
    B1( int _x, const std::string& _y ) : x( _x ), y( _y ) {}
    int GetX() const { return x; }
    const std::string& GetY() const { return y; }
    ~B1() {}
private:
    const int x;
    const std::string y;
};

WALLAROO_REGISTER( B1, int, std::string );

class C1: public Part
{
public:
    C1( double _x ) : x( _x ) {}
    double GetX() const { return x; }
private:
    double x;
};

WALLAROO_REGISTER( C1, double );

template < typename T >
class D1 : public Part
{
public:
    D1() : x( 3 ) {}
    T GetX() const { return x; }
private:
    T x;
};

WALLAROO_REGISTER( D1< double > );
WALLAROO_REGISTER( D1< int > );

namespace Foo
{
    class E1 : public Part
    {
    public:
        E1() : x( 9 ) {}
        int GetX() const { return x; }
    private:
        const int x;
    };
}

WALLAROO_REGISTER( Foo::E1 );

// tests

BOOST_AUTO_TEST_SUITE( Creation )

BOOST_AUTO_TEST_CASE( creationOk )
{
    Catalog catalog;
    BOOST_REQUIRE_NO_THROW( catalog.Create( "a", "A1" ) );
    BOOST_REQUIRE_NO_THROW( catalog[ "a" ] );
}

BOOST_AUTO_TEST_CASE( creationUnexistentObj )
{
    Catalog catalog;
    BOOST_CHECK_THROW( catalog.Create( "a", "Unknown" ), ElementNotFound );
}

BOOST_AUTO_TEST_CASE( duplicatedElement )
{
    Catalog catalog;
    BOOST_REQUIRE_NO_THROW( catalog.Create( "a", "A1" ) );
    BOOST_CHECK_THROW( catalog.Create( "a", "B1", 10, std::string( "hello" ) ), DuplicatedElement );
}

BOOST_AUTO_TEST_CASE( retrieveOk )
{
    Catalog catalog;
    shared_ptr< A1 > a1;
    shared_ptr< A1 > a2;
    BOOST_REQUIRE_NO_THROW( a1 = catalog.Create( "a", "A1" ) );
    BOOST_REQUIRE_NO_THROW( a2 = catalog[ "a" ] );
    BOOST_CHECK( a1 -> F() == 5 );
    BOOST_CHECK( a1 == a2 );
}

BOOST_AUTO_TEST_CASE( retrieveKo )
{
    Catalog catalog;
    BOOST_CHECK_THROW( catalog[ "b" ], ElementNotFound );
}

BOOST_AUTO_TEST_CASE( multipleParametersOk )
{
    Catalog catalog;

    BOOST_REQUIRE_NO_THROW( catalog.Create( "b", "B1", 10, std::string( "hello" ) ) );
    BOOST_REQUIRE_NO_THROW( catalog[ "b" ] );
    shared_ptr< B1 > b = catalog[ "b" ];
    BOOST_CHECK( b -> GetX() == 10 );
    BOOST_CHECK( b -> GetY() == "hello" );

    BOOST_REQUIRE_NO_THROW( catalog.Create( "c", "C1", (double)69.0 ) );
    BOOST_REQUIRE_NO_THROW( catalog[ "c" ] );
    shared_ptr< C1 > c = catalog[ "c" ];
    BOOST_CHECK( c -> GetX() == (double)69.0 );
}

#if 0 // fails because we use const char* instead of std::string
BOOST_AUTO_TEST_CASE( stringCtor )
{
    Catalog catalog;
    BOOST_REQUIRE_NO_THROW( catalog.Create( "b", "B1", 10, "hello" ) );
    BOOST_REQUIRE_NO_THROW( catalog[ "b" ] );
}
#endif

BOOST_AUTO_TEST_CASE( templateRegistration )
{
    Catalog catalog;
    shared_ptr< D1< double > > d1_double;
    shared_ptr< D1< int > > d1_int;
    // existent classes:
    BOOST_REQUIRE_NO_THROW( d1_double = catalog.Create( "d1_double", "D1< double >" ) );
    BOOST_REQUIRE_NO_THROW( d1_int = catalog.Create( "d1_int", "D1< int >" ) );
    // unexistent class
    BOOST_CHECK_THROW( catalog.Create( "d1_string", "D1< string >" ), ElementNotFound );
    // retrieve
    shared_ptr< D1< double > > d1_double_bis;
    BOOST_REQUIRE_NO_THROW( d1_double_bis = catalog[ "d1_double" ] );
    BOOST_CHECK( d1_double -> GetX() == 3.0 );
    BOOST_CHECK( d1_double == d1_double_bis );
}

BOOST_AUTO_TEST_CASE( namespaceRegistration )
{
    Catalog catalog;
    shared_ptr< Foo::E1 > e;

    // existent classes:
    BOOST_REQUIRE_NO_THROW( e = catalog.Create( "e", "Foo::E1" ) );
    // retrieve
    shared_ptr< Foo::E1 > e_bis;
    BOOST_REQUIRE_NO_THROW( e_bis = catalog[ "e" ] );
    BOOST_CHECK( e -> GetX() == 9 );
    BOOST_CHECK( e == e_bis );
}

BOOST_AUTO_TEST_CASE( containerRemoveAndErase )
{
    Catalog catalog;

    BOOST_REQUIRE_NO_THROW( catalog.Create( "x", "A1" ) );
    BOOST_REQUIRE_NO_THROW( catalog[ "x" ] );
    BOOST_REQUIRE_NO_THROW( catalog.Remove( "x" ) );
    BOOST_CHECK_THROW( catalog.Remove( "x" ), ElementNotFound );
    BOOST_CHECK_THROW( catalog[ "x" ], ElementNotFound );

    BOOST_REQUIRE_NO_THROW( catalog.Create( "x", "B1", 0, std::string() ) );
    BOOST_REQUIRE_NO_THROW( catalog.Create( "y", "C1", 1.0 ) );
    catalog.Clear();
    BOOST_CHECK_THROW( catalog[ "x" ], ElementNotFound );
    BOOST_CHECK_THROW( catalog[ "y" ], ElementNotFound );
    BOOST_CHECK( catalog.Size() == 0 );
}

// ###


BOOST_AUTO_TEST_SUITE_END()