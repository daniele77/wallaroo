/*******************************************************************************
* wallaroo - A library for configurable creation and wiring of C++ classes.
* Copyright (C) 2012 Daniele Pallastrelli
*
* This file is part of wallaroo.
* For more information, see http://wallaroolib.sourceforge.net/
*
* Boost Software License - Version 1.0 - August 17th, 2003
*
* Permission is hereby granted, free of charge, to any person or organization
* obtaining a copy of the software and accompanying documentation covered by
* this license (the "Software") to use, reproduce, display, distribute,
* execute, and transmit the Software, and to prepare derivative works of the
* Software, and to permit third-parties to whom the Software is furnished to
* do so, all subject to the following:
*
* The copyright notices in the Software and this entire statement, including
* the above license grant, this restriction and the following disclaimer,
* must be included in all copies of the Software, in whole or in part, and
* all derivative works of the Software, unless such copies or derivative
* works are solely in the form of machine-executable object code generated by
* a source language processor.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
* SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
* FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
******************************************************************************/

#include <boost/test/unit_test.hpp>
#include <vector>

#include "wallaroo/detail/grammar.h"

using namespace wallaroo;
using namespace wallaroo::detail;

BOOST_AUTO_TEST_SUITE(GrammarSuite)

struct StringPair
{
    StringPair(const std::string& s1, const std::string& s2) : _1(s1), _2(s2) {}
    const std::string _1;
    const std::string _2;
};

struct StringTriplet
{
    StringTriplet(const std::string& s1, const std::string& s2, const std::string& s3) : _1(s1), _2(s2), _3(s3) {}
    const std::string _1;
    const std::string _2;
    const std::string _3;
};

struct TestAction // Grammar callbacks
{
    void Load(const std::string& library)
    {
        libraries.push_back(library);
    }
    void AssignAttribute(const std::string& lvalue, const std::string& attId, const std::string& attValue)
    {
        attributes.push_back(StringTriplet(lvalue, attId, attValue));
    }
    void Create(const std::string& lvalue, const std::string& rvalue)
    {
        objects.push_back(StringPair(lvalue, rvalue));
    }
    void AssignDep(const std::string& lvalue, const std::string& dep, const std::string& rvalue)
    {
        dependencies.push_back(StringTriplet(lvalue, dep, rvalue));
    }

    std::vector< std::string > libraries;
    std::vector< StringPair > objects;
    std::vector< StringTriplet > attributes;
    std::vector< StringTriplet > dependencies;

};

BOOST_AUTO_TEST_CASE(Empty)
{
    std::stringstream s;
    TestAction a;
    Grammar<TestAction> g( s, a );
    BOOST_REQUIRE_NO_THROW( g.Parse() );
    BOOST_CHECK( a.libraries.empty() );
    BOOST_CHECK( a.objects.empty() );
    BOOST_CHECK( a.attributes.empty() );
    BOOST_CHECK( a.dependencies.empty() );
}

BOOST_AUTO_TEST_CASE(Simple)
{
    std::stringstream s;
    s << "@load \"plugin.so\"; "
        "dev = new Device(name = \"dev1\", port = 30, load = 3.14); "
        "dev2 = new Device2;"
        "dev.dep = dev2; ";
    TestAction a;
    Grammar<TestAction> g(s, a);
    
    BOOST_REQUIRE_NO_THROW( g.Parse() );
    
    BOOST_CHECK_EQUAL(a.libraries[0], "plugin.so");
    
    BOOST_CHECK_EQUAL(a.objects[0]._1, "dev");
    BOOST_CHECK_EQUAL(a.objects[0]._2, "Device"); 

    BOOST_CHECK_EQUAL(a.attributes[0]._1, "dev");
    BOOST_CHECK_EQUAL(a.attributes[0]._2, "name");
    BOOST_CHECK_EQUAL(a.attributes[0]._3, "dev1");

    BOOST_CHECK_EQUAL(a.dependencies[0]._1, "dev");
    BOOST_CHECK_EQUAL(a.dependencies[0]._2, "dep");
    BOOST_CHECK_EQUAL(a.dependencies[0]._3, "dev2");
}

BOOST_AUTO_TEST_SUITE_END()