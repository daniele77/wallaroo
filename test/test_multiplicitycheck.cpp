/*******************************************************************************
 * wallaroo - A library for configurable creation and wiring of C++ classes.
 * Copyright (C) 2012 Daniele Pallastrelli
 *
 * This file is part of wallaroo.
 * For more information, see http://wallaroo.googlecode.com/
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

#include <boost/test/unit_test.hpp>

#include "wallaroo/registered.h"
#include "wallaroo/catalog.h"

using namespace wallaroo;
using namespace cxx0x;

// some classes:

class A3 : public Device
{
public:
    virtual ~A3() {}
};

WALLAROO_REGISTER( A3 )

class B3 : public Device
{
public:
    B3() : 
        mandatoryAttribute( "mandatoryAttribute", RegistrationToken() ),
        optionalAttribute( "optionalAttribute", RegistrationToken() ),
        collectionAttribute( "collectionAttribute", RegistrationToken() )
    {}
    virtual ~B3() {}
public:
    Plug< A3 > mandatoryAttribute;
    Plug< A3, optional > optionalAttribute;
    Plug< A3, collection > collectionAttribute;
};

WALLAROO_REGISTER( B3 )

class C3 : public Device
{
public:
    C3() :
        collectionAttribute1( "collectionAttribute1", RegistrationToken() ),
        collectionAttribute13( "collectionAttribute13", RegistrationToken() ),
        collectionAttribute33( "collectionAttribute33", RegistrationToken() )
    {}
    virtual ~C3() {}
private:
    Plug< A3, bounded_collection< 1 > > collectionAttribute1;
    Plug< A3, bounded_collection< 1, 3 > > collectionAttribute13;
    Plug< A3, bounded_collection< 3, 3 > > collectionAttribute33;
};

WALLAROO_REGISTER( C3 )


// tests

BOOST_AUTO_TEST_SUITE( MultiplicityCheck )

BOOST_AUTO_TEST_CASE( checkOk )
{
    Catalog catalog;

    BOOST_REQUIRE_NO_THROW( catalog.Create( "a1", "A3" ) );
    BOOST_REQUIRE_NO_THROW( catalog[ "a1" ] );
    BOOST_REQUIRE_NO_THROW( catalog.Create( "a2", "A3" ) );
    BOOST_REQUIRE_NO_THROW( catalog[ "a2" ] );
    BOOST_REQUIRE_NO_THROW( catalog.Create( "a3", "A3" ) );
    BOOST_REQUIRE_NO_THROW( catalog[ "a3" ] );
    BOOST_REQUIRE_NO_THROW( catalog.Create( "b", "B3" ) );
    BOOST_REQUIRE_NO_THROW( catalog[ "b" ] );

    wallaroo_within( catalog )
    {
        BOOST_REQUIRE_NO_THROW( use( "a1" ).as( "mandatoryAttribute" ).of( "b" ) );
        BOOST_REQUIRE_NO_THROW( use( "a2" ).as( "optionalAttribute" ).of( "b" ) );
        BOOST_REQUIRE_NO_THROW( use( "a1" ).as( "collectionAttribute" ).of( "b" ) );
        BOOST_REQUIRE_NO_THROW( use( "a2" ).as( "collectionAttribute" ).of( "b" ) );
        BOOST_REQUIRE_NO_THROW( use( "a3" ).as( "collectionAttribute" ).of( "b" ) );
    }

    BOOST_REQUIRE_NO_THROW( catalog.CheckWiring() );
    BOOST_REQUIRE( catalog.IsWiringOk() );
}

BOOST_AUTO_TEST_CASE( checkOptional )
{
    Catalog catalog;

    BOOST_REQUIRE_NO_THROW( catalog.Create( "a", "A3" ) );
    BOOST_REQUIRE_NO_THROW( catalog[ "a" ] );
    BOOST_REQUIRE_NO_THROW( catalog.Create( "b1", "B3" ) );
    BOOST_REQUIRE_NO_THROW( catalog[ "b1" ] );
    BOOST_REQUIRE_NO_THROW( catalog.Create( "b2", "B3" ) );
    BOOST_REQUIRE_NO_THROW( catalog[ "b2" ] );

    wallaroo_within( catalog )
    {
        BOOST_REQUIRE_NO_THROW( use( "a" ).as( "mandatoryAttribute" ).of( "b1" ) );
        BOOST_REQUIRE_NO_THROW( use( "a" ).as( "optionalAttribute" ).of( "b1" ) );
        BOOST_REQUIRE_NO_THROW( use( "a" ).as( "mandatoryAttribute" ).of( "b2" ) );
    }

    BOOST_REQUIRE_NO_THROW( catalog.CheckWiring() );
    BOOST_REQUIRE( catalog.IsWiringOk() );
}


BOOST_AUTO_TEST_CASE( checkKo )
{
    Catalog catalog;

    BOOST_REQUIRE_NO_THROW( catalog.Create( "a", "A3" ) );
    BOOST_REQUIRE_NO_THROW( catalog[ "a" ] );
    BOOST_REQUIRE_NO_THROW( catalog.Create( "b", "B3" ) );
    BOOST_REQUIRE_NO_THROW( catalog[ "b" ] );

    wallaroo_within( catalog )
    {
        BOOST_REQUIRE_NO_THROW( use( "a" ).as( "optionalAttribute" ).of( "b" ) );
        // mandatoryAttribute not wired!
    }

    BOOST_CHECK_THROW( catalog.CheckWiring(), WiringError );
    BOOST_REQUIRE( !catalog.IsWiringOk() );
}


BOOST_AUTO_TEST_CASE( checkCollectionMultiplicityOk )
{
    Catalog catalog;

    BOOST_REQUIRE_NO_THROW( catalog.Create( "a", "A3" ) );
    BOOST_REQUIRE_NO_THROW( catalog[ "a" ] );
    BOOST_REQUIRE_NO_THROW( catalog.Create( "c", "C3" ) );
    BOOST_REQUIRE_NO_THROW( catalog[ "c" ] );

    wallaroo_within( catalog )
    {
        // 1 in [1,+inf)
        BOOST_REQUIRE_NO_THROW( use( "a" ).as( "collectionAttribute1" ).of( "c" ) );

        // 2 in [1,3]
        BOOST_REQUIRE_NO_THROW( use( "a" ).as( "collectionAttribute13" ).of( "c" ) );
        BOOST_REQUIRE_NO_THROW( use( "a" ).as( "collectionAttribute13" ).of( "c" ) );

        // 3 in [3,3]
        BOOST_REQUIRE_NO_THROW( use( "a" ).as( "collectionAttribute33" ).of( "c" ) );
        BOOST_REQUIRE_NO_THROW( use( "a" ).as( "collectionAttribute33" ).of( "c" ) );
        BOOST_REQUIRE_NO_THROW( use( "a" ).as( "collectionAttribute33" ).of( "c" ) );
    }

    BOOST_REQUIRE_NO_THROW( catalog.CheckWiring() );
    BOOST_REQUIRE( catalog.IsWiringOk() );
}

BOOST_AUTO_TEST_CASE( checkCollectionMultiplicityKo1 )
{
    Catalog catalog;

    BOOST_REQUIRE_NO_THROW( catalog.Create( "a", "A3" ) );
    BOOST_REQUIRE_NO_THROW( catalog[ "a" ] );
    BOOST_REQUIRE_NO_THROW( catalog.Create( "c", "C3" ) );
    BOOST_REQUIRE_NO_THROW( catalog[ "c" ] );

    wallaroo_within( catalog )
    {
        // 0 not in [1,+inf)
        // BOOST_REQUIRE_NO_THROW( use( "a" ).as( "collectionAttribute1" ).of( "c" ) );

        // 2 in [1,3]
        BOOST_REQUIRE_NO_THROW( use( "a" ).as( "collectionAttribute13" ).of( "c" ) );
        BOOST_REQUIRE_NO_THROW( use( "a" ).as( "collectionAttribute13" ).of( "c" ) );

        // 3 in [3,3]
        BOOST_REQUIRE_NO_THROW( use( "a" ).as( "collectionAttribute33" ).of( "c" ) );
        BOOST_REQUIRE_NO_THROW( use( "a" ).as( "collectionAttribute33" ).of( "c" ) );
        BOOST_REQUIRE_NO_THROW( use( "a" ).as( "collectionAttribute33" ).of( "c" ) );
    }

    BOOST_CHECK_THROW( catalog.CheckWiring(), WiringError );
    BOOST_REQUIRE( !catalog.IsWiringOk() );
}

BOOST_AUTO_TEST_CASE( checkCollectionMultiplicityKo2 )
{
    Catalog catalog;

    BOOST_REQUIRE_NO_THROW( catalog.Create( "a", "A3" ) );
    BOOST_REQUIRE_NO_THROW( catalog[ "a" ] );
    BOOST_REQUIRE_NO_THROW( catalog.Create( "c", "C3" ) );
    BOOST_REQUIRE_NO_THROW( catalog[ "c" ] );

    wallaroo_within( catalog )
    {
        // 1 in [1,+inf)
        BOOST_REQUIRE_NO_THROW( use( "a" ).as( "collectionAttribute1" ).of( "c" ) );

        // 4 not in [1,3]
        BOOST_REQUIRE_NO_THROW( use( "a" ).as( "collectionAttribute13" ).of( "c" ) );
        BOOST_REQUIRE_NO_THROW( use( "a" ).as( "collectionAttribute13" ).of( "c" ) );
        BOOST_REQUIRE_NO_THROW( use( "a" ).as( "collectionAttribute13" ).of( "c" ) );
        BOOST_REQUIRE_NO_THROW( use( "a" ).as( "collectionAttribute13" ).of( "c" ) );

        // 3 in [3,3]
        BOOST_REQUIRE_NO_THROW( use( "a" ).as( "collectionAttribute33" ).of( "c" ) );
        BOOST_REQUIRE_NO_THROW( use( "a" ).as( "collectionAttribute33" ).of( "c" ) );
        BOOST_REQUIRE_NO_THROW( use( "a" ).as( "collectionAttribute33" ).of( "c" ) );
    }

    BOOST_CHECK_THROW( catalog.CheckWiring(), WiringError );
    BOOST_REQUIRE( !catalog.IsWiringOk() );
}

BOOST_AUTO_TEST_CASE( checkCollectionMultiplicityKo3 )
{
    Catalog catalog;

    BOOST_REQUIRE_NO_THROW( catalog.Create( "a", "A3" ) );
    BOOST_REQUIRE_NO_THROW( catalog[ "a" ] );
    BOOST_REQUIRE_NO_THROW( catalog.Create( "c", "C3" ) );
    BOOST_REQUIRE_NO_THROW( catalog[ "c" ] );

    wallaroo_within( catalog )
    {
        // 1 in [1,+inf)
        BOOST_REQUIRE_NO_THROW( use( "a" ).as( "collectionAttribute1" ).of( "c" ) );

        // 2 in [1,3]
        BOOST_REQUIRE_NO_THROW( use( "a" ).as( "collectionAttribute13" ).of( "c" ) );
        BOOST_REQUIRE_NO_THROW( use( "a" ).as( "collectionAttribute13" ).of( "c" ) );

        // 1 not in [3,3]
        BOOST_REQUIRE_NO_THROW( use( "a" ).as( "collectionAttribute33" ).of( "c" ) );
    }

    BOOST_CHECK_THROW( catalog.CheckWiring(), WiringError );
    BOOST_REQUIRE( !catalog.IsWiringOk() );
}

BOOST_AUTO_TEST_CASE( checkPlugTest )
{
    Catalog catalog;

    BOOST_REQUIRE_NO_THROW( catalog.Create( "a1", "A3" ) );
    BOOST_REQUIRE_NO_THROW( catalog.Create( "a2", "A3" ) );
    BOOST_REQUIRE_NO_THROW( catalog.Create( "b", "B3" ) );

    BOOST_REQUIRE_NO_THROW( use( catalog[ "a1" ] ).as( "mandatoryAttribute" ).of( catalog[ "b" ] ) );
    shared_ptr< B3 > b = catalog[ "b" ];
    BOOST_REQUIRE( b -> mandatoryAttribute );
    BOOST_REQUIRE( ! b -> optionalAttribute );

    BOOST_REQUIRE_NO_THROW( use( catalog[ "a2" ] ).as( "optionalAttribute" ).of( catalog[ "b" ] ) );
    BOOST_REQUIRE( b -> optionalAttribute );

}

BOOST_AUTO_TEST_SUITE_END()