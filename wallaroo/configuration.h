/*******************************************************************************
 * wallaroo - A library for configurable creation and wiring of C++ classes.
 * Copyright (C) 2012 Daniele Pallastrelli
 *
 * This file is part of wallaroo.
 * For more information, see http://wallaroolib.sourceforge.net/
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

#ifndef WALLAROO_CONFIGURATION_H_
#define WALLAROO_CONFIGURATION_H_

#include <string>
#include <sstream>
#include <fstream>
#include <vector>
#include "wallaroo/catalog.h"
#include "wallaroo/dynamic_loader.h"
#include "detail/grammar.h"

namespace wallaroo
{

class Configuration
{
public:
    explicit Configuration( const std::string& file ) 
    {
        std::ifstream f( file.c_str() );
        detail::Grammar< Configuration > g( f, *this );
        g.Parse();
    }

    explicit Configuration( std::istream& s )
    {
        detail::Grammar< Configuration > g( s, *this );
        g.Parse();
    }

    // Load the shared libraries specified in the parsed file.
    // throw WrongFile if one of the file specified does not exists or its format is wrong
    void LoadPlugins()
    {
        for ( std::size_t i = 0; i < libraries.size(); ++i )
        {
            wallaroo::Plugin::Load( libraries[ i ] + Plugin::Suffix() );
        }
    }

    void Fill( Catalog& catalog ) 
    {
        for ( std::size_t i = 0; i < objects.size(); ++i )
        {
            const Object& o = objects[ i ];
            catalog.Create( o.instance, o.type );
        }
        for ( std::size_t i = 0; i < attributes.size(); ++i )
        {
            const Attribute& a = attributes[ i ];
            set_attribute( a.attribute ).of( catalog[ a.object ] ).to( a.value );
        }
        for ( std::size_t i = 0; i < dependencies.size(); ++i )
        {
            const Dependency& d = dependencies[ i ];
            use( catalog[ d.value ] ).as( d.dependency ).of( catalog[ d.object ] );
        }
    }

private:

    struct Object
    {
        Object( const std::string& i, const std::string& c ) :
            instance( i ), type( c ) {}
        const std::string instance;
        const std::string type;
    };

    struct Attribute
    {
        Attribute( const std::string& obj, const std::string& att, const std::string& v ) :
            object( obj ), attribute( att ), value( v ) {}
        const std::string object;
        const std::string attribute;
        const std::string value;
    };

    struct Dependency
    {
        Dependency( const std::string& obj, const std::string& dep, const std::string& v ) :
            object( obj ), dependency( dep ), value( v ) {}
        const std::string object;
        const std::string dependency;
        const std::string value;
    };

    // Grammar callbacks:
    friend class detail::Grammar< Configuration >;
    void Load( const std::string& library )
    {
        libraries.push_back( library );
    }
    void AssignAttribute( const std::string& lvalue, const std::string& attId, const std::string& attValue )
    {
        attributes.push_back( Attribute( lvalue, attId, attValue ) );
    }
    void Create( const std::string& lvalue, const std::string& rvalue )
    {
        objects.push_back( Object( lvalue, rvalue ) );
    }
    void AssignDep( const std::string& lvalue, const std::string& dep, const std::string& rvalue )
    {
        dependencies.push_back( Dependency( lvalue, dep, rvalue ) );
    }

    std::vector< std::string > libraries;
    std::vector< Object > objects;
    std::vector< Attribute > attributes;
    std::vector< Dependency > dependencies;
};


} // namespace

#endif // WALLAROO_CONFIGURATION_H_

