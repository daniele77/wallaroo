/*******************************************************************************
 * wallaroo - A library for configurable creation and wiring of C++ classes.
 * Copyright (C) 2012 Daniele Pallastrelli
 *
 * This file is part of wallaroo.
 * For more information, see http://wallaroolib.sourceforge.net/
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

#ifndef WALLAROO_CONFIGURATION_H_
#define WALLAROO_CONFIGURATION_H_

#include <string>
#include <sstream>
#include <fstream>
#include <vector>
#include "wallaroo/catalog.h"
#include "wallaroo/dynamic_loader.h"
#include "detail/grammar.h"

namespace wallaroo
{

/**
* This class can parse a configuration written in WAL format,
* by reading the content from a file or from a std::istream,
* containing a list of objects to be created and their wiring.
* Then it can populate a @c Catalog with that objects.
* The syntax of the wal file should be similar to:
\code

# this is a comment

@load "plugin";  # load the dynamic library named "plugin.so" or "plugin.dll"

a = new A8;      # create a new object of class A8
a1 = new A8();   # idem
b = new B8(  att_int=10);  # create an object of class B8 assigning an attribute
c1 = new C8(att_ui=10);
c2 = new C8(att_ui=10);
d = new Foo::D8(att_string="mystring",att_int=34);
e = new E8( att1=5, att2=3.14 );
f = new F8(att1=3.14,att2=false);
g = new G8(att1=false,att2=true);
h = new H8(att1=1.0, att2=-2.0);
l = new L8(att1=-100, att2="foo bar");
m = new M8(att1=-2000000000, att2='a');
n = new N8(att1='b',att2=200);
o_double = new O8<double>;
o_int = new O8<int>;
p = new P5;
q = new Q5;

c1.x=a;			# link "x" collaborator of the object "c1" to the part "a"
c2.x=b;
d.container=a;
d.container=b;

\endcode

* The syntax in Backus-Naur form is the following:
\code

    <start>          ::=   <list> <done>
    <list>           ::=   <statement> ";" <list> | <empty>
    <statement>      ::=   <loadexpr> | <assignexpr>
    <loadexpr>       ::=   "@load" <value>
    <assignexpr>     ::=   <id> "=" "create" <id> <optparamlist> | <id> <depexpr>
    <optparamlist>   ::=   <empty> | "(" <attrlist> ")"
    <attrlist>       ::=   <empty> | <attrassign> <moreattrassign>
    <attrassign>     ::=   <id> "=" <value>
    <moreattrassign> ::=   <empty> | attrsep <attrassign>    
    <depexpr>        ::=   "." <id> "=" <id>

\endcode
*/
class Configuration
{
public:
    /** Create a Configuration from the path specified as parameter.
    * @param fileName The path of the file to parse.
    * @throw WrongFile If the file does not exist.
	* @throw SyntaxError If the content is invalid.
    */
    explicit Configuration( const std::string& file ) 
    {
        std::ifstream f( file.c_str() );
        if ( !f ) throw WrongFile( file + " not found" );
        detail::Grammar< Configuration > g( f, *this );
        g.Parse();
    }

    /** Create a Configuration from the std::istream specified as parameter.
    * @param s The input stream to parse
    * @throw SyntaxError If the content is invalid.
    */
    explicit Configuration( std::istream& s )
    {
        detail::Grammar< Configuration > g( s, *this );
        g.Parse();
    }

    /** Load the plugins (shared libraries) specified in the configuration.
    * @throw WrongFile if one of the file specified does not exists or its format is wrong
    */
    void LoadPlugins()
    {
        for ( std::size_t i = 0; i < libraries.size(); ++i )
        {
            wallaroo::Plugin::Load( libraries[ i ] + Plugin::Suffix() );
        }
    }

    /** Fill the @c catalog with the objects and relations specified in the file.
     * @param catalog The catalog target of the new items of the file.
     * @throw DuplicatedElement If more elements share the same name.
     * @throw ElementNotFound If the configuration use a class name not registered or an object not created.
     * @throw WrongType If an assignment (attribute or dependency) has type mismatch.
     */
    void Fill( Catalog& catalog ) 
    {
        for ( std::size_t i = 0; i < objects.size(); ++i )
        {
            const Object& o = objects[ i ];
            catalog.Create( o.instance, o.type );
        }
        for ( std::size_t i = 0; i < attributes.size(); ++i )
        {
            const Attribute& a = attributes[ i ];
            set_attribute( a.attribute ).of( catalog[ a.object ] ).to( a.value );
        }
        for ( std::size_t i = 0; i < dependencies.size(); ++i )
        {
            const Dependency& d = dependencies[ i ];
            use( catalog[ d.value ] ).as( d.dependency ).of( catalog[ d.object ] );
        }
    }

private:

    struct Object
    {
        Object( const std::string& i, const std::string& c ) :
            instance( i ), type( c ) {}
        std::string instance;
        std::string type;
    };

    struct Attribute
    {
        Attribute( const std::string& obj, const std::string& att, const std::string& v ) :
            object( obj ), attribute( att ), value( v ) {}
        std::string object;
        std::string attribute;
        std::string value;
    };

    struct Dependency
    {
        Dependency( const std::string& obj, const std::string& dep, const std::string& v ) :
            object( obj ), dependency( dep ), value( v ) {}
        std::string object;
        std::string dependency;
        std::string value;
    };

    // Grammar callbacks:
    friend class detail::Grammar< Configuration >;
    void Load( const std::string& library )
    {
        libraries.push_back( library );
    }
    void AssignAttribute( const std::string& lvalue, const std::string& attId, const std::string& attValue )
    {
        attributes.push_back( Attribute( lvalue, attId, attValue ) );
    }
    void Create( const std::string& lvalue, const std::string& rvalue )
    {
        objects.push_back( Object( lvalue, rvalue ) );
    }
    void AssignDep( const std::string& lvalue, const std::string& dep, const std::string& rvalue )
    {
        dependencies.push_back( Dependency( lvalue, dep, rvalue ) );
    }

    std::vector< std::string > libraries;
    std::vector< Object > objects;
    std::vector< Attribute > attributes;
    std::vector< Dependency > dependencies;
};


} // namespace

#endif // WALLAROO_CONFIGURATION_H_

