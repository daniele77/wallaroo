/*******************************************************************************
 * wallaroo - A library for configurable creation and wiring of C++ classes.
 * Copyright (C) 2012 Daniele Pallastrelli
 *
 * This file is part of wallaroo.
 * For more information, see http://wallaroolib.sourceforge.net/
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

#ifndef WALLAROO_DEPENDENCY_H_
#define WALLAROO_DEPENDENCY_H_

#include "cxx0x.h"

namespace wallaroo
{

// forward declaration:
class Part;

/**
 * This represents the base class for every Collaborator template.
 * It can link itself with a Part object and check if the wiring
 * satisfies its multiplicity constraints.
 */
class Dependency
{
public:
    virtual ~Dependency() {}
    /** Link this Dependency with a Part.
    * @param part The Part you want to link with this Dependency.
    * @throw WrongType If this Dependency could not be wire with Part @c part 
    */
    virtual void Link( const cxx0x::shared_ptr< Part >& part ) = 0;
    /** Check if this Dependency is correctly wired according to the
    * constraints specified as template parameters in the derived class.
    * @return true If the check pass.
    */
    virtual bool WiringOk() const = 0;
};

} // namespace

#endif
