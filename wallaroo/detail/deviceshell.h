/*******************************************************************************
 * wallaroo - A library for configurable creation and wiring of C++ classes.
 * Copyright (C) 2012 Daniele Pallastrelli
 *
 * This file is part of wallaroo.
 * For more information, see http://wallaroo.googlecode.com/
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

#ifndef WALLAROO_DETAIL_DEVICESHELL_H_
#define WALLAROO_DETAIL_DEVICESHELL_H_

#include <string>
#include <typeinfo>
#include <cassert>
#include "wallaroo/cxx0x.h"
#include "wallaroo/device.h"

namespace wallaroo
{
namespace detail
{


// This class provides the conversion operator to the contained type.
// In particular, the Catalog::operator[] returns a DeviceShell
// that can be converted to the inner type.
class DeviceShell
{
public:

    DeviceShell( const cxx0x::shared_ptr< Device >& dev ) :
        device( dev ) 
    {
        assert( device );
    }

    void Wire( const std::string& plugName, const DeviceShell& destination ) const
    {
        device -> Wire( plugName, destination.device );
    }

    /** Convert the contained device to the type T
    * @return the converted device.
    * @throw WrongType if the contained device is not a subclass of T
    */
    template < class T >
    operator cxx0x::shared_ptr< T >()
    {
        cxx0x::shared_ptr< T > result = cxx0x::dynamic_pointer_cast< T >( device );
        if ( ! result ) throw WrongType();
        return result;
    }

private:
    cxx0x::shared_ptr< Device > device;
};

} // namespace detail
} // namespace wallaroo

#endif
