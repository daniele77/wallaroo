/*******************************************************************************
 * wallaroo - A library for configurable creation and wiring of C++ classes.
 * Copyright (C) 2012 Daniele Pallastrelli
 *
 * This file is part of wallaroo.
 * For more information, see http://wallaroo.googlecode.com/
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

#ifndef WALLAROO_DEVICE_H_
#define WALLAROO_DEVICE_H_

#include <string>
#include <sstream>
#include "exceptions.h"
#include "cxx0x.h"
#include "connector.h"
#include "deserializable_value.h"

namespace wallaroo
{

// forward declaration:
class Plugin;

/**
 * This class is a token used to ensure that Plugs and Attributes 
 * can only be created as data members of Device.
 * The class carries also the device information.
 * This class should not be used directly: you can create an instace
 * by invoking the method Device::RegistrationToken() from a class
 * derived by Device.
 */
class RegToken
{
public:
    Device* GetDevice() const { return device; }
private:
    friend class Device;
    RegToken( Device* d ) : device( d ) {}
    Device* device;
};

/**
 * This class represents a "device" that owns connectors (dependencies) and
 * attributes.
 * You can plug its connectors to other devices using the method Device::Wire
 * and assign a value to its attributes using the method SetAttribute, but
 * wallaroo provides mechanisms more flexible for these tasks
 * (i.e., the DSL constructs "use().as().of()" and "set().of().to()" and the
 * configuration files).
 */
class Device
{
public:
    // we need to make Device virtual, to use dynamic_cast
    virtual ~Device() {}

    /** Plug the connector @c connector of this device into the Device @c device.
     *  @throw ElementNotFound if @c connector does not exist in this device.
     *  @throw WrongType if @c device has not a type compatible with the connector.
     */
    void Wire( const std::string& connector, const cxx0x::shared_ptr< Device >& device )
    {
        Connectors::iterator i = connectors.find( connector );
        if ( i == connectors.end() ) throw ElementNotFound( connector );
        ( i -> second ) -> PlugInto( device );
    }

    /** Assign a value to an attribute of the device. 
     *  @param attribute the name of the attribute.
     *  @param value the value to assign.
     *  @throw ElementNotFound if @attribute does not exist in this device.
     *  @throw WrongType if @c value has not a type compatible with the attribute.
     */
    // NOTE: we pass value as const reference to allow the effective specialization of string
    template < typename T >
    void SetAttribute( const std::string& attribute, const T& value )
    {
        std::ostringstream stream;
        if ( !( stream << std::boolalpha << value ) ) throw WrongType();
        SetStringAttribute( attribute, stream.str() );
    }

   /** Check the multiplicity of its plugs.
    *  @return true if the check pass
    */
    bool MultiplicitiesOk() const
    {
        for ( 
            Connectors::const_iterator i = connectors.begin();
            i != connectors.end();
            ++i
        )
            if ( ! i -> second -> WiringOk() )
                return false;
        return true;
    }

    /** This method get called by Catalog::Init().
     *  If you have work to be done for the initialization of your
     *  class, you should implement this method in the derived class.
     *  This is useful if you want to do your initialization after plugs
     *  are been wired and attributes set. Keep in mind that in the constructor
     *  the wiring has not be performed yet.
     */
    virtual void Init() {};

protected:
    RegToken RegistrationToken()
    { 
        return RegToken( this );
    }
private:
    // this method should only be invoked by Class
    // to add the reference counter for the shared library.
    template < class T1, class T2 > friend class Class;
    void Source( const cxx0x::shared_ptr< Plugin >& p )
    {
        plugin = p;
    }

    // this method should only be invoked by the connectors of this device
    // to register itself into the connectors table.
    template < class T, class P, template < typename E, typename Allocator = std::allocator< E > > class Container > friend class Plug;
    void Register( const std::string& id, Connector* plug )
    {
        connectors[ id ] = plug;
    }

    // this method should only be invoked by the attributes of this device
    // to register itself into the attributes table.
    template < class T > friend class Attribute;
    void Register( const std::string& id, DeserializableValue* attribute )
    {
        attributes[ id ] = attribute;
    }

    // set attribute to a value represented as string.
    // throws ElementNotFound if the attribute doesn't exist.
    // throws WrongType if @c value is not a valid representation for the type of the attribute
    void SetStringAttribute( const std::string& attribute, const std::string& value )
    {
        Attributes::iterator i = attributes.find( attribute );
        if ( i == attributes.end() ) throw ElementNotFound( attribute );
        ( i -> second ) -> Value( value );
    }

    typedef cxx0x::unordered_map< std::string, Connector* > Connectors;
    Connectors connectors;

    typedef cxx0x::unordered_map< std::string, DeserializableValue* > Attributes;
    Attributes attributes;

    cxx0x::shared_ptr< Plugin > plugin; // optional shared ptr to plugin, to release the shared library when is no more used
};


/** Assign a value to an attribute of type string of the device.
 *  @param attribute the name of the attribute.
 *  @param value the value to assign.
 *  @throw ElementNotFound if @attribute does not exist in this device.
 */
template <>
inline void Device::SetAttribute( const std::string& attribute, const std::string& value )
{
    // Optimization: with strings we don't need conversion
    SetStringAttribute( attribute, value );
}

} // namespace

#endif
