/*******************************************************************************
 * wallaroo - A library for configurable creation and wiring of C++ classes.
 * Copyright (C) 2012 Daniele Pallastrelli
 *
 * This file is part of wallaroo.
 * For more information, see http://wallaroolib.sourceforge.net/
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

#ifndef WALLAROO_DYNAMIC_LOADER_H_
#define WALLAROO_DYNAMIC_LOADER_H_

#include <string>
#include <vector>
#include "cxx0x.h"
#include "part.h"
#include "class.h"
#include "exceptions.h"
#include "detail/dyn_class_descriptor.h"
#include "detail/dynamic_library.h"

namespace wallaroo
{

/**
 * Represent a shared library containing wallaroo class definitions.
 *
 * Given the file name, Plugin loads a shared library 
 * and stores the descritptors of the registered classes defined inside.
 * Then, the classes will be available for the dynamic creation via 
 * the Catalog::Create method.
 *
 * You can get a Plugin istance by using the Plugin::Load method. The instance lifetime
 * is managed by wallaroo: the object is destroyed (and the library is unloaded)
 * when there are no more references (including instances of registered classes and descriptors).
 */
class Plugin
{
public:
    /** Load the shared library specified by the file name @c fileName thus
     * giving access via the Catalog::Create method to all the classes registered
     * inside with the macro \ref WALLAROO_DYNLIB_REGISTER.
     * @param fileName The path of the shared library to load.
     * @throw WrongFile if the file does not exist or its format is wrong.
     */
    static cxx0x::shared_ptr< Plugin > Load( const std::string& fileName )
    {
        using namespace detail;
        cxx0x::shared_ptr< Plugin > p( new Plugin( fileName ) );
        typedef std::vector< Descriptor >* (*Function)(void);
        Function GetClasses = p -> library.GetFunction< Function >( "GetClasses" );
        if ( GetClasses == nullptr ) throw WrongFile( fileName );
        std::vector< Descriptor >* descriptors = GetClasses();
        for ( std::size_t i = 0; i < descriptors -> size(); ++i )
            Class< void, void >::Register( (*descriptors)[ i ].name, (*descriptors)[ i ].create, p );
        return p;
    }
    /** Returns the platform-specific filename suffix
     * for shared libraries (including the period).
     * In debug mode, the suffix also includes a
     * "d" to specify the debug version of a library.
     */
    static std::string Suffix()
    {
        return detail::DynamicLibrary::Suffix();
    }
private:
    // throw WrongFile if the file does not exist or its format is wrong.
    Plugin( const std::string& fileName ) :
      library( fileName )
    {
    }
    detail::DynamicLibrary library;
};

} // namespace wallaroo

#endif // WALLAROO_DYNAMIC_LOADER_H_
