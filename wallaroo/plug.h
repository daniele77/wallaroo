/*******************************************************************************
 * wallaroo - A library for configurable creation and wiring of C++ classes.
 * Copyright (C) 2012 Daniele Pallastrelli
 *
 * This file is part of wallaroo.
 * For more information, see http://wallaroo.googlecode.com/
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

#ifndef WALLAROO_PLUG_H_
#define WALLAROO_PLUG_H_

#include <string>
#include <typeinfo>
#include <vector>
#include "cxx0x.h"
#include "connector.h"
#include "device.h"
#include "exceptions.h"

namespace wallaroo
{

/// This type should be used as second template parameter in Plug class to specify the Plug is optional
/// (i.e.: you can omit to wire a device to the plug)
struct optional
{
    template < typename T >
    static bool WiringOk( const cxx0x::weak_ptr< T >& ) { return true; }
};
/// This type should be used as second template parameter in Plug class to specify the Plug is mandatory
/// (i.e.: you cannot omit to wire a device to the plug)
struct mandatory
{
    template < typename T >
    static bool WiringOk( const cxx0x::weak_ptr< T >& t ) { return !t.expired(); }
};
/// This type should be used as second template parameter in Plug class to specify the Plug is a collection
/// and you can wire to the plug a number of devices greater or equal to @c MIN
/// and lesser or equal to @c MAX
template < std::size_t MIN = 0, std::size_t MAX = 0 >
struct bounded_collection
{
    template < typename T >
    static bool WiringOk( const T* t )
    {
        const std::size_t s = t -> size();
        return ( s >= MIN && ( MAX == 0 || s <= MAX ) );
    }
};
// template specializations to avoid warning about "unsigned is always >= 0":
template < std::size_t MAX >
struct bounded_collection< 0, MAX >
{
    template < typename T >
    static bool WiringOk( const T* t )
    {
        return ( t -> size() <= MAX );
    }
};
template < std::size_t MIN >
struct bounded_collection< MIN, 0 >
{
    template < typename T >
    static bool WiringOk( const T* t )
    {
        return ( t -> size() >= MIN );
    }
};
template <>
struct bounded_collection< 0, 0 >
{
    template < typename T >
    static bool WiringOk( const T* )
    {
        return true;
    }
};
/// This type should be used as second template parameter in Plug class to specify the Plug is a collection
/// and you can wire as many device to the plug as you want. Even zero.
typedef bounded_collection<> collection;

/**
 * This represents a "plug" of a "device" that
 * you can "plug" into another "device".
 *
 * If the device1 has the plug1 plugged to device2, device1 will
 * basically get a pointer to device2.
 *
 * @tparam T The type of the Device contained
 * @tparam P This represents the kind of Plug (@ref mandatory if you must wire a device,
 *           @ref optional if you can leave this plug unwired, 
 *           @ref collection if you can wire many devices to this plug)
 * @tparam Container If P = @ref collection, this represents the std container the Plug will derive from.
 */
template <
    typename T,
    typename P = mandatory,
    template < typename E, typename Allocator = std::allocator< E > > class Container = std::vector
>
class Plug  : public Connector
{
public:

    typedef cxx0x::weak_ptr< T > WeakPtr;
    typedef cxx0x::shared_ptr< T > SharedPtr;

    /** Create a Plug and register it to its device for future wiring.
    * @param name the name of this plug
    * @param token the registration token got calling Device::RegistrationToken()
    */
    Plug( const std::string& name, const RegToken& token )
    {
        Device* owner = token.GetDevice();
        owner -> Register( name, this );
    }

    /** Plug this plug into a device
    * @param dev The device you want insert this plug into
    * @throw WrongType If @c dev is not a subclass of @c T
    */
    void PlugInto( const cxx0x::shared_ptr< Device >& dev )
    {
        cxx0x::shared_ptr< T > _dev = cxx0x::dynamic_pointer_cast< T >( dev );
        if ( ! _dev ) // bad type!
            throw WrongType();
        else
            device = _dev;
    }

    /** Give access to the embedded device.
    * @throw DeletedDeviceError If the embedded device has been deleted.
    */
    SharedPtr operator -> ()
    {
        SharedPtr result = device.lock();
        if ( ! result ) 
            throw DeletedDeviceError();
        return result;
    }

    /** Give access to the embedded device as const.
    * @throw DeletedDeviceError If the embedded device has been deleted.
    */
    const SharedPtr operator -> () const
    {
        const SharedPtr result = device.lock();
        if ( ! result )
            throw DeletedDeviceError();
        return result;
    }

    /** Convert to a shared ptr.
    * @throw DeletedDeviceError If the embedded device has been deleted.
    */
    operator SharedPtr()
    {
        SharedPtr result = device.lock();
        if ( ! result )
            throw DeletedDeviceError();
        return result;
    }

    /** Convert to a const shared ptr.
    * @throw DeletedDeviceError If the embedded device has been deleted.
    */
    operator const SharedPtr() const
    {
        const SharedPtr result = device.lock();
        if ( ! result )
            throw DeletedDeviceError();
        return result;
    }
    
    /** Returns true if the plug has been wired and the embedded
    * device has not been deleted.
    * @return true If the embedded device exists.
    */
    operator bool() const
    {
        return !device.expired();
    }

   /** Check if this Plug is correctly wired according to the
    * P template parameter policy.
    * @return true If the check pass.
    */
    virtual bool WiringOk() const
    {
        return P::WiringOk( device );
    }

private:
    WeakPtr device;

    // copy ctor and assignment operator disabled
    Plug( const Plug& );
    Plug& operator = ( const Plug& );
};


// partial specialization for the collection case
template <
    typename T,
    template < typename E, typename Allocator = std::allocator< E > > class Container,
    std::size_t MIN,
    std::size_t MAX
>
class Plug< T, bounded_collection< MIN, MAX >, Container > : public Connector, public Container< cxx0x::weak_ptr< T > >
{
private:
    typedef Container< cxx0x::weak_ptr< T > > C;

public:

    /** Create a Plug and register it to its device for future wiring.
    * @param name the name of this plug
    * @param token the registration token got calling Device::RegistrationToken()
    */
    Plug( const std::string& name, const RegToken& token )
    {
        Device* owner = token.GetDevice();
        owner -> Register( name, this );
    }

    /** Connect a device into this multiple plug
    * @param device The device to connect
    * @throw WrongType If @c device is not a subclass of @c T
    */
    void PlugInto( const cxx0x::shared_ptr< Device >& device )
    {
        cxx0x::shared_ptr< T > obj = cxx0x::dynamic_pointer_cast< T >( device );
        if ( ! obj ) // bad type!
            throw WrongType();
        else
            C::push_back( obj );
    }

    /** Check if this Plug is correctly wired (i.e. the size of the collection
    * must be comprise in the interval [MIN, MAX])
    * @return true If the check pass.
    */
    virtual bool WiringOk() const
    {
        return bounded_collection< MIN, MAX >::WiringOk( this );
    }

private:
    // copy ctor and assignment operator disabled
    Plug( const Plug& );
    Plug& operator = ( const Plug& );
};

}

#endif
