/*******************************************************************************
 * wallaroo - A library for configurable creation and wiring of C++ classes.
 * Copyright (C) 2012 Daniele Pallastrelli
 *
 * This file is part of wallaroo.
 * For more information, see http://wallaroolib.sourceforge.net/
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

#ifndef WALLAROO_XMLCONFIGURATION_H_
#define WALLAROO_XMLCONFIGURATION_H_

#include "catalog.h"
#include "detail/ptreebasedcfg.h"
#include <boost/property_tree/xml_parser.hpp>

using namespace boost::property_tree;

namespace wallaroo
{

/**
* This class can parse a xml file containing a list of objects to
* be created and their wiring.
* Then it can populate a @c Catalog with that objects.
* The syntax of the xml file should be similar to:
\code
<wallaroo>

  <plugins>
    <shared>pluginName</shared>
  </plugins>
 
  <parts>
    <part>
      <name>instance1</name>
      <class>className1</class>
    </part>
    <part>
      <name>instance2</name>
      <class>className2</class>
      <attribute>
        <name>attr1_name</name>
        <value>attr1_value</value>
      </attribute>
      <attribute>
        <name>attr2_name</name>
        <value>attr2_value</value>
      </attribute>
    </part>
    <part>
      <name>instance3</name>
      <class>className3</class>
      <parameter1>
        <type>string</type>
        <value>mystring</value>
      </parameter1>
      <parameter2>
        <type>int</type>
        <value>34</value>
      </parameter2>
    </part>
  </parts>
  </parts>

  <wiring>
    <wire>
      <source>sourceInstance</source>
      <dest>targetInstance</dest>
      <collaborator>plugName</collaborator>
    </wire>
    <wire>
      <source>sourceInstance2</source>
      <dest>targetInstance2</dest>
      <collaborator>plugName2</collaborator>
    </wire>
  </wiring>

</wallaroo>
\endcode
*/
class XmlConfiguration : private detail::PtreeBasedCfg
{
public:
    /** Create a XmlConfiguration from the path specified as parameter.
    * @param fileName The path of the file to parse
    * @throw WrongFile If the file does not exist or its format is wrong.
    */
    explicit XmlConfiguration( const std::string& fileName ) :
        detail::PtreeBasedCfg( tree )
    {
        try
        {
            read_xml( fileName, tree, xml_parser::no_comments | xml_parser::trim_whitespace );
        }
        catch ( const xml_parser_error& e )
        {
            throw WrongFile( e.what() );
        }
    }

    /** Load the plugins (shared libraries) specified in the file.
    * @throw WrongFile if the file contains a semantic error.
    */
    void LoadPlugins()
    {
        detail::PtreeBasedCfg::LoadPlugins();
    }

    /** Fill the @c catalog with the objects and relations specified in the file.
     * @param catalog The catalog target of the new items of the file.
     * @throw WrongFile If the file contains a semantic error.
     */
    void Fill( Catalog& catalog )
    {
        detail::PtreeBasedCfg::Fill( catalog );
    }
private:
    ptree tree;
};

} // namespace

#endif
